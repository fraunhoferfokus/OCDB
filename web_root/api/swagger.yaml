# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Open City Database API
  description: Quick and easy deployable cities related data service with read/write access to user generated content, points of interest and social interactions (likes, comments, ratings, check-ins).
  version: "1.0.2"
  license: 
    name: Apache 2.0
# array of all schemes that the OCDB API supports
schemes:
  - https
host:
 localhost
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
consumes:
  - application/json
paths:
  /users:
    get:
      summary: OCDB login.
      description: 
        To access any OCDB instance a authorization token needs to be created. For this purpose the login request must be performed.
      parameters:
        - name: a
          in: query
          description: (SHA1) hashed user name or email of the user to log in. For a log out just leave this parameter empty.
          required: true
          type: string
          format: string
        - name: b
          in: query
          description: (SHA1) hashed password of the user to log in. For a log out just leave this parameter empty.
          required: true
          type: string
          format: string
      tags:
        - User
      responses:
        200:
          description: An array of products
          schema:
            $ref: '#/definitions/Access'
        400:
          description: Bad request
        401:
          description: Unauthorized request
        404:
          description: User not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Access:
    properties:
      access_token:
        type: string
        description: The access token after successful log in. This token is to be used in any subsequent request as header parameter.
      uid:
        type: string
        description: The unique identifier for the logged in user.
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
